/**
 * @author Nicolas Bredeche <nicolas.bredeche@upmc.fr>
 * @author Yann Teddy Ropaul<yannteddy.ropaul@gmail.com>
 */



#ifndef VANILLAEECONTROLLER_H
#define VANILLAEECONTROLLER_H

#include "RoboroboMain/common.h"
#include "RoboroboMain/roborobo.h"
#include "Controllers/Controller.h"
#include "WorldModels/RobotWorldModel.h"
#include "VanillaEE/include/genome.h"
#include <vector>
#include <iostream>



#define STEPTONEXTGENERATION 400
#define FITNESSWINDOWSIZE 50
#define RESOURCESATBEGINNING 100
#define RESOURCESVALUE 25
#define MUTATIONALPHA 5
#define MUTATIONEPSILON 0.2
#define MUTATIONSIGMA 0.0001
#define TOURNAMENTSIZE 3




class VanillaEEController : public Controller
{
	public:
		//Initializes the variables
		VanillaEEController( RobotWorldModel *__wm );
		~VanillaEEController();
		
		void reset();
		void step();
		genome getGenome();
		void setGenome(genome _genome);
       		void monitorSensory();
		void fillPool(genome _genome, int _fitness);

		

	private:
		int ticks ;
		int resources ;
		int fitnessWindowSize;
		int wait ; // if any genome were capt , wait.		
		//double alpha ;
		//double epsilon;
		int fitness;
		std::vector<int> fitnessWindow;
		int poolSize;
		std::vector<genome> genomePool ;
		std::vector<int> fitnessPool;
		genome myGenome;		
		void broadcastGenome();
		void updateFitness();
		void evaluation();
		int getFitness();
		void fillFitness(int size);
		void evolution(int time);
		genome tournament(int tournamentSize);
		int inPool(genome _genome);
		void resourcesManagement();
		

};


#endif

